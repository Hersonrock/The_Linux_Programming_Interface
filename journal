
Today I studied from page 113 to 115
I spent most of the time learing about the calls
-getppid()
-getpid()
-kill()
Im trying to prove what is being said that when a parent dies the child
processes are re-parented to init.
Now the current parent is bash so I'm seeing some issues with making the test
work.
I guess I will need to use something like fork() to create a test that does not
involve bash.

Thursday, May 23, 2024
Today I worked further on the "kill_parent.c" program which worked!
I used the fork() call to make a child and orhpaned the process by killing the
parent with a signal 15.

The child with the same pid was now under init as the parent.
Read from page 115 to page 118

Friday, May 24, 2024
Today was a rought day I read from page 118 to 138
I learned about Stack and stack frames, as well as Virtual memory management
and memory layout
I also spend some time working with enviroment list and the four functions 
explained on the chapted
-putenv()
-getenv()
-setenv()
-unsetenv()

I feel conflicted as evevn though I know environment variables can be useful
for things like process intercomunication I have not seen the need to use
enviroment variables on my own programs.

as a project I wrote a small test program that shows me how getenv() and the 
extern char **environ works.

Today I spend an ungodly amount of time reading this chapter my brain was 
not understanding anything. I hope tomorrow is better.


Saturday, May 25, 2024
Today I studied from page 139 to 140
I really did not advance a lot of the book, BUT and this is important I 
practiced a lot on understanding the virtual memory address segments.

I made a program that captures the program break address before and after a
sbrk(8) call and I can see how the program break grows by 8 bytes.

I also have been trying to make sense out of the other pointers adresses of
etext,edata,end by looking at /proc/[pid]/maps

But I'm a little lost as some memory addresses seem to be way to big, for 
example I cannot see why there is such big jumps between some of the pointer.
I can keep working on it tomorow.

Sunday, May 26, 2024
Today I spent like 3 hours working on a program to parse the /proc/[pid]/maps
file, and kinda failed misserably. I wanted to be exact on how I allocate space
for reading buffers but turns out you cannot just "stat" a virtual file system
file like maps (what a surprise).

I tried different methods like using offsets, and stat() systemcall. Seems I'll 
have to give up and use an arbitrarily big buffer to dump file contents before
I can really read it. I'll work further on it later on today or tomorrow.
I give up for today.


Monday, May 27, 2024
Today I spent like 5 hours making my memmap program functional.

I'm not really sure if the 6+ functions used are worth it. All it does is to 
open a file and digest hexadecimals to print the difference between them
but it took me way too much effort.

The purpose of the program is to help me better understand how is exactly
virtual memory organized. based on /proc/[pid/maps.

Anyway! I'm proud of my program but it was a pain to make and I did not advance
on the book.


Tuesday, May 28, 2024

Today I finished my tool that allow me to see the differences between the
segments on memory based on reading the /proc/*/maps file

I also read from page 140 to 153 Tomorrow I'll start chapter 8
Wednesday, May 29, 2024

Started studying chapter 8.
Studied from page 153 to 164

Thursday, May 30, 2024

Today I finished the remaining of chapter 8 and started chapter 9
Studied up to page 171. Im reading on File-System User ID and File-System Group
ID.

I also finished making the skeleton on Obsidian for this chapter study.

Friday, May 31, 2024
Today I'm continuing to work on the book chapter 9. I made a small program that
checks its real, effective and saved-set uid.

It was strange as the outputs of the getresuid() function are completly by
reference so I had to initialize some pointers for use.

finished chapter 9, now reading chapter 10 page 185
